name: EVCS Data Scraper

on:
  schedule:
    # Run daily at 6:00 AM UTC (adjust timezone as needed)
    - cron: '0 6 * * *'
  workflow_dispatch: # Allow manual trigger
    inputs:
      send_email:
        description: 'Send email notification'
        required: false
        default: true
        type: boolean

jobs:
  scrape-evcs-data:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y wget unzip xvfb
        
    - name: Install Microsoft Edge
      run: |
        curl https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor > microsoft.gpg
        sudo install -o root -g root -m 644 microsoft.gpg /etc/apt/trusted.gpg.d/
        sudo sh -c 'echo "deb [arch=amd64,arm64,armhf signed-by=/etc/apt/trusted.gpg.d/microsoft.gpg] https://packages.microsoft.com/repos/edge stable main" > /etc/apt/sources.list.d/microsoft-edge-dev.list'
        sudo apt-get update
        sudo apt-get install -y microsoft-edge-stable
        
    - name: Install EdgeDriver
      run: |
        # Get Edge version
        EDGE_VERSION=$(microsoft-edge --version | cut -d ' ' -f 3 | cut -d '.' -f 1-3)
        echo "Edge version: $EDGE_VERSION"
        
        # Try multiple download URLs
        DOWNLOAD_URLS=(
          "https://msedgedriver.azureedge.net/${EDGE_VERSION}/edgedriver_linux64.zip"
          "https://developer.microsoft.com/en-us/microsoft-edge/tools/webdriver/"
          "https://github.com/SeleniumHQ/selenium/releases/latest"
        )
        
        # Try downloading EdgeDriver
        for url in "${DOWNLOAD_URLS[@]}"; do
          if [[ "$url" == *"azureedge"* ]]; then
            echo "Trying Azure Edge download..."
            if wget -q --timeout=30 --tries=3 -O edgedriver.zip "$url"; then
              break
            fi
          fi
        done
        
        # Fallback: Install via apt if download fails
        if [ ! -f edgedriver.zip ] || [ ! -s edgedriver.zip ]; then
          echo "Direct download failed, trying alternative installation..."
          
          # Install chromium-driver as fallback and create symlink
          sudo apt-get update
          sudo apt-get install -y chromium-driver
          
          # Create EdgeDriver symlink pointing to ChromeDriver (they're compatible)
          sudo ln -sf /usr/bin/chromedriver /usr/local/bin/msedgedriver
          
          echo "EdgeDriver installed via chromium-driver fallback"
        else
          # Extract downloaded EdgeDriver
          unzip -q edgedriver.zip
          sudo mv msedgedriver /usr/local/bin/
          sudo chmod +x /usr/local/bin/msedgedriver
          echo "EdgeDriver installed via direct download"
        fi
        
        # Verify installation
        /usr/local/bin/msedgedriver --version || echo "EdgeDriver installation verification failed"
        
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install selenium-wire selenium pandas openpyxl brotli sib-api-v3-sdk python-dotenv
        
    - name: Create .env file from secrets
      run: |
        echo "EMAIL_API_KEY=${{ secrets.EMAIL_API_KEY }}" > .env
        echo "NOTIFICATION_EMAIL=${{ secrets.NOTIFICATION_EMAIL }}" >> .env
        
    - name: Run EVCS scraper
      run: |
        export DISPLAY=:99
        Xvfb :99 -screen 0 1920x1080x24 > /dev/null 2>&1 &
        python evcs_scraper.py
        
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: evcs-data-${{ github.run_number }}
        path: |
          evcs_data_*.json
          evcs_data_*.xlsx
          evcs_data_*.csv
          evcs_data_*_flat.xlsx
          evcs_data_*_flat.csv
        retention-days: 30
